<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>链表</title>
      <link href="/2022/04/18/%E9%93%BE%E8%A1%A8/"/>
      <url>/2022/04/18/%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>链表</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span><span class="token keyword">int</span> val<span class="token punctuation">;</span>ListNode<span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一.单链表结构<br>1.寻找链表的中点<br>作为链表题中较为简单的题，中点问题无外乎就是用快慢指针来完成<br>当链表的个数为偶数时<br>对于快指针的next进行判断，则会使慢指针在mid前一个停下<br>对于快指针的next的next进行判断，则会使慢指针在mid前一个停下</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">findlistmid</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token comment">//当链表的个数为偶数时返回mid前一个的值</span><span class="token punctuation">{</span>ListNode<span class="token operator">*</span> n1 <span class="token operator">=</span> root<span class="token punctuation">,</span><span class="token operator">*</span>n2<span class="token operator">=</span>root<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>n2<span class="token operator">-&gt;</span>next<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token operator">&amp;&amp;</span>n2<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>n1 <span class="token operator">=</span> n1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>n2 <span class="token operator">=</span> n2<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> n1<span class="token punctuation">;</span><span class="token punctuation">}</span>ListNode<span class="token operator">*</span> <span class="token function">FindListmid</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token comment">//当链表的个数为偶数时返回mid后一个的值</span><span class="token punctuation">{</span>ListNode<span class="token operator">*</span> n1 <span class="token operator">=</span> root<span class="token punctuation">,</span> <span class="token operator">*</span> n2 <span class="token operator">=</span> root<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n2 <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> n2<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>n1 <span class="token operator">=</span> n1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>n2 <span class="token operator">=</span> n2<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> n1<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.翻转链表<br>首先定义一个空的节点表示翻转后尾节点（原头节点指向位置）<br>curr表示的是当前遍历的节点<br>prev表示的是当前节点的上一节点（也就是翻转后当前节点所指向的节点）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">TurnList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>ListNode<span class="token operator">*</span> prev <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>ListNode<span class="token operator">*</span> curr <span class="token operator">=</span> root<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>curr<span class="token punctuation">)</span> <span class="token punctuation">{</span>ListNode<span class="token operator">*</span> next <span class="token operator">=</span> curr<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>curr<span class="token operator">-&gt;</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>prev <span class="token operator">=</span> curr<span class="token punctuation">;</span>curr <span class="token operator">=</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> prev<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二.双链表结构<br>判断两单链表是否相交<br>时间复杂度O（N）<br>空间复杂度O（1）</p><p>1.首先第一步需要判断的是两个链表是否是有环的<br>    第一种方法：哈希表<br>    判断节点地址是否在哈希表内注册判断链表有无环<br>    第二钟方法：快慢指针（快慢指针的所在环内转的圈数少于两圈）<br>            （1）.当快指针指向空-&gt;无环<br>            （2）.当快指针与慢指针相遇-&gt;有环（且将快指针返回开头（每次走一步），当再次相遇时，得到入环节点）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span><span class="token function">FindListIncorporate</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>ListNode<span class="token operator">*</span> slow<span class="token punctuation">;</span>ListNode<span class="token operator">*</span> fast<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>next<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>slow<span class="token operator">=</span>node<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>fast<span class="token operator">=</span>node<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>fast<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token operator">||</span>fast<span class="token operator">-&gt;</span>next<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>fast<span class="token operator">==</span>slow<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>fast<span class="token operator">=</span>fast<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>slow<span class="token operator">=</span>slow<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>fast<span class="token operator">=</span>node<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span>slow<span class="token punctuation">)</span><span class="token punctuation">{</span>fast<span class="token operator">=</span>fast<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>slow<span class="token operator">=</span>slow<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> slow<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.对两个链表的的有无环进行情况分类<br>（1）.当两单链表都无环（如果相交，最后部分一定共有）<br>首先得到两链表的尾节点end1和end2和长度len1和len2<br>当end1！=end2时：无公共节点<br>当ende1==end2时：有公共节点<br>    令长链表的头节点先出发走abs（len1-len2）再一起走<br>    最终相遇的第一个节点为两链表第一个相交节点</p><pre><code>优化：    对len1计算链表长度时 n++    对len2计算链表长度时 n--    最终n&gt;0 len1长 n&lt;0 len2长</code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">Ringlesslist</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>node1<span class="token punctuation">,</span>ListNode<span class="token operator">*</span>node2<span class="token punctuation">)</span><span class="token punctuation">{</span>ListNode <span class="token operator">*</span>end1<span class="token operator">=</span>node1<span class="token punctuation">,</span><span class="token operator">*</span>end2<span class="token operator">=</span>node2<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>end1<span class="token operator">-&gt;</span>next<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>end1<span class="token operator">=</span>end1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token operator">++</span>n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>end2<span class="token operator">-&gt;</span>next<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span> end2<span class="token operator">=</span>end2<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> <span class="token operator">--</span>n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>end1<span class="token operator">!=</span>end2<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>ListNode <span class="token operator">*</span>shot<span class="token operator">=</span>n<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">?</span>node2<span class="token operator">?</span>node1<span class="token punctuation">;</span>ListNode <span class="token operator">*</span>elder<span class="token operator">=</span>n<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">?</span>node1<span class="token operator">?</span>node2<span class="token punctuation">;</span>n<span class="token operator">=</span><span class="token function">abs</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>shot<span class="token operator">!=</span>elder<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>elder<span class="token operator">=</span>elder<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>n<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>shot<span class="token operator">=</span>shot<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>elder<span class="token operator">=</span>elder<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> shot<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）.当一链表有环一链表无环时<br>    无相交</p><p>（3).当两链表都有环（入环节点为loop1，loop2）<br>        1).当两链表在入环前相交，此时则为两链表都无环时的情况（将入环节点看作尾节链表在环前就相交点）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode <span class="token operator">*</span><span class="token function">Sameentrypoint</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span>node1<span class="token punctuation">,</span>ListNode<span class="token operator">*</span>node2<span class="token punctuation">,</span>ListNode<span class="token operator">*</span>loop<span class="token punctuation">)</span><span class="token punctuation">{</span>ListNode <span class="token operator">*</span>head1<span class="token operator">=</span>node1<span class="token punctuation">;</span>ListNode <span class="token operator">*</span>head2<span class="token operator">=</span>node2<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>node1<span class="token operator">!=</span>loop<span class="token punctuation">)</span><span class="token punctuation">{</span>node1<span class="token operator">=</span>node1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token operator">++</span>n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>node2<span class="token operator">!=</span>loop<span class="token punctuation">)</span><span class="token punctuation">{</span> node2<span class="token operator">=</span>node2<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> <span class="token operator">--</span>n<span class="token punctuation">;</span><span class="token punctuation">}</span>ListNode <span class="token operator">*</span>shot<span class="token operator">=</span>n<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">?</span>head2：head1<span class="token punctuation">;</span>ListNode <span class="token operator">*</span>elder<span class="token operator">=</span>n<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">?</span>head1：head2<span class="token punctuation">;</span>n<span class="token operator">=</span><span class="token function">abs</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>shot<span class="token operator">!=</span>elder<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>elder<span class="token operator">=</span>elder<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>n<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>shot<span class="token operator">=</span>shot<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>elder<span class="token operator">=</span>elder<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> shot<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）各自成环：loop1在向下走的过程中遇不上loop2，无相交<br>3）有不同的入环节点：loop1向下走的过程中遇上loop2，return（loop1或loop2）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span><span class="token function">samering</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>loop1<span class="token punctuation">,</span>ListNode<span class="token operator">*</span>loop2<span class="token punctuation">)</span><span class="token punctuation">{</span>ListNode <span class="token operator">*</span>loop<span class="token operator">=</span>loop1<span class="token punctuation">;</span>loop1<span class="token operator">=</span>loop1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>loop1<span class="token operator">!=</span>loop<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>loop1<span class="token operator">==</span>loop2<span class="token punctuation">)</span><span class="token keyword">return</span> loop1<span class="token punctuation">;</span><span class="token comment">//return loop2;</span>loop1<span class="token operator">=</span>loop1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>双环情况下的判断函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode <span class="token operator">*</span><span class="token function">Doublelooplist</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span>node1<span class="token punctuation">,</span>ListNode<span class="token operator">*</span>node2<span class="token punctuation">,</span>ListNode<span class="token operator">*</span>loop1<span class="token punctuation">,</span>ListNode<span class="token operator">*</span>loop2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>loop1<span class="token operator">==</span>loop2<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">Sameentrypoint</span><span class="token punctuation">(</span>node1<span class="token punctuation">,</span>node2<span class="token punctuation">,</span>loop1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">samering</span><span class="token punctuation">(</span>loop1<span class="token punctuation">,</span>loop2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode <span class="token operator">*</span><span class="token function">Findingintersectingnodes</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>node1<span class="token punctuation">,</span>ListNode<span class="token operator">*</span>node2<span class="token punctuation">)</span><span class="token punctuation">{</span>ListNode<span class="token operator">*</span>loop1<span class="token operator">=</span><span class="token function">FindListIncorporate</span><span class="token punctuation">(</span>node1<span class="token punctuation">)</span><span class="token punctuation">;</span>ListNode<span class="token operator">*</span>loop2<span class="token operator">=</span><span class="token function">FindListIncorporate</span><span class="token punctuation">(</span>node2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>loop1<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token operator">&amp;&amp;</span>loop2<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">Doublelooplist</span><span class="token punctuation">(</span>node1<span class="token punctuation">,</span>node2<span class="token punctuation">,</span>loop1<span class="token punctuation">,</span>loop2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>loop1<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token operator">&amp;&amp;</span>loop2<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">Ringlesslist</span><span class="token punctuation">(</span>node1<span class="token punctuation">,</span>node2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello world</title>
      <link href="/2022/04/17/hello-world/"/>
      <url>/2022/04/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到HMM的博客，为什么建个这样的博客呢，最开始是看到了金毛的博客，又漂亮，又有很多自己的总结知识，觉得挺不错。但我感觉自己用平板写笔记没啥区别嘛。<br>但大一下学期开始我就发现自己有许多的内容不记得了，哪怕是看笔记都有好多东西没看的特别懂，感觉自己对这些东西都挺不熟练，在很多帖子上逛了逛，看到许多大佬都有写<br>博客总结的习惯，所以我也学着网上教程用hexo建立了一个博客，现在呢就慢慢更新总结自己之前写的笔记，后面就是学啥总结啥了。<br>当前学习的内容</p><p>数据结构和算法：我看的是b站左程云的视频<br>操作系统：直接看的csapp<br>cpp:cpp总感觉学的很乱，计划着再看一次cpp prime总结下</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"hello world"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>中文</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
